import React, { useState } from 'react';

// Simple fallback component if the enhanced version has issues
export default function SimpleFallback() {
  const [rawChatLog, setRawChatLog] = useState(null);
  const [timelineData, setTimelineData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const parsedJson = JSON.parse(e.target.result);
          setRawChatLog(parsedJson);
          setTimelineData(null);
          setError(null);
        } catch (err) {
          setError("Invalid JSON file. Please upload the chat log generated by the script.");
        }
      };
      reader.readAsText(file);
    }
  };

  const generateTimeline = async () => {
    if (!rawChatLog) {
      setError("Please upload the chat log file first.");
      return;
    }
    setIsLoading(true);
    setError(null);

    // Simple timeline generation for demo
    setTimeout(() => {
      setTimelineData([
        {
          timestamp: "2024-01-15T10:00:00Z",
          title: "Initial Consultation",
          summary: "Patient presented with symptoms and medical history was reviewed.",
          type: "milestone"
        },
        {
          timestamp: "2024-01-15T11:30:00Z",
          title: "Diagnostic Tests Ordered",
          summary: "Blood work and imaging tests were prescribed based on symptoms.",
          type: "decision"
        }
      ]);
      setIsLoading(false);
    }, 2000);
  };

  return (
    <div className="bg-gray-100 font-sans min-h-screen p-4 sm:p-6 lg:p-8">
      <header className="mb-8 text-center">
        <h1 className="text-4xl font-bold text-gray-900">Healthcare Journey Analyzer</h1>
        <p className="text-lg text-gray-600 mt-1">Upload a chat log and let AI build the visualization.</p>
      </header>

      <div className="max-w-3xl mx-auto bg-white p-8 rounded-2xl shadow-lg">
        <h2 className="text-2xl font-semibold text-gray-800 mb-4">1. Upload Your Chat Log</h2>
        <div className="flex items-center justify-center w-full">
          <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
            <div className="flex flex-col items-center justify-center pt-5 pb-6">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
                <polyline points="17 8 12 3 7 8" />
                <line x1="12" x2="12" y1="3" y2="15" />
              </svg>
              <p className="mb-2 text-sm text-gray-500"><span className="font-semibold">Click to upload</span> or drag and drop</p>
              <p className="text-xs text-gray-500">JSON file generated by the script</p>
            </div>
            <input type="file" className="hidden" accept=".json" onChange={handleFileUpload} />
          </label>
        </div>
        {rawChatLog && <p className="text-center text-green-600 mt-4 font-semibold">File loaded successfully! ({rawChatLog.length} messages)</p>}

        <h2 className="text-2xl font-semibold text-gray-800 mb-4 mt-8">2. Generate Visualization</h2>
        <button 
          onClick={generateTimeline}
          disabled={!rawChatLog || isLoading}
          className="w-full flex items-center justify-center gap-2 bg-blue-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-all"
        >
          {isLoading ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              <span>Analyzing...</span>
            </>
          ) : (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.71 0L11.58 9.42a1.21 1.21 0 0 0 0 1.71l5.29 5.29a1.21 1.21 0 0 0 1.71 0l7.08-7.08a1.21 1.21 0 0 0 0-1.71Z" />
                <path d="m11 13-8 8" />
                <path d="M14 6a3 3 0 0 0-3 3" />
              </svg>
              <span>Let AI Build the Timeline</span>
            </>
          )}
        </button>
        {error && <p className="text-red-500 text-center mt-4">{error}</p>}
      </div>
      
      {timelineData && (
        <div className="max-w-3xl mx-auto bg-white rounded-2xl shadow-lg p-6 mt-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-6">AI-Generated Member Journey</h2>
          <div className="relative pl-4">
            <div className="absolute left-6 top-0 h-full w-0.5 bg-gray-200"></div>
            {timelineData.map((event, index) => (
              <div key={index} className="mb-8 relative">
                <div className="absolute -left-1.5 top-1 flex items-center justify-center">
                  <div className={`h-4 w-4 rounded-full border-4 border-white ${event.type === "decision" ? "bg-red-500" : "bg-blue-500"}`}></div>
                </div>
                <div className="ml-8">
                  <p className="text-sm text-gray-500">{new Date(event.timestamp).toLocaleDateString()}</p>
                  <h3 className="font-bold text-lg text-gray-800">{event.title}</h3>
                  <p className="text-gray-600 mt-1">{event.summary}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
